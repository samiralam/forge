name: Build and Package macOS App

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - master  # Run when push to master branch
  release:
    types: [created]  # Run when a new release is created

jobs:
  build-mac-app:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git changelog generation

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven

      - name: Build Mac App with Maven
        run: |
          # Run Maven through integration-test phase to create the macOS app bundle
          mvn clean integration-test -P osx

      - name: Create Self-Contained App Bundle with jpackage
        run: |
          # First create a directory for our self-contained app
          mkdir -p jpackage_input
          
          # Extract Maven version and convert to a valid macOS app version format
          MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          # Extract just the numbers and dots, remove leading zeros after dots
          APP_VERSION=$(echo $MAVEN_VERSION | sed -E 's/([0-9]+)\.([0-9]+)\.0*([0-9]+).*/\1.\2.\3/' | sed 's/-.*$//')
          echo "Maven version: $MAVEN_VERSION -> App version: $APP_VERSION"
          
          # Copy the jar file and resources
          cp forge-gui-desktop/target/forge-gui-desktop-*-jar-with-dependencies.jar jpackage_input/forge.jar
          
          # Copy the icon
          cp forge-gui/src/main/config/Forge.icns jpackage_input/Forge.icns
          
          # Copy skin resources to be included in the app bundle
          mkdir -p jpackage_input/resources/skins
          if [ -d "forge-gui/res/skins" ]; then
            cp -R forge-gui/res/skins/* jpackage_input/resources/skins/
          fi
          
          # Copy additional resources
          mkdir -p jpackage_input/resources/sounds
          if [ -d "forge-gui/res/sounds" ]; then
            cp -R forge-gui/res/sounds/* jpackage_input/resources/sounds/
          fi
          
          mkdir -p jpackage_input/resources/fonts
          if [ -d "forge-gui/res/fonts" ]; then
            cp -R forge-gui/res/fonts/* jpackage_input/resources/fonts/
          fi
          
          mkdir -p jpackage_input/resources/images
          if [ -d "forge-gui/res/images" ]; then
            cp -R forge-gui/res/images/* jpackage_input/resources/images/
          fi
          
          # Create deck file associations if needed
          mkdir -p forge-gui/src/main/config
          if [ ! -f "forge-gui/src/main/config/forge.deck.associations" ]; then
            cat > forge-gui/src/main/config/forge.deck.associations << EOF
            <mime-type>application/x-forge-deck</mime-type>
            <extension>dck</extension>
            <description>Forge Deck File</description>
            <icon>Forge.icns</icon>
            EOF
          fi
          
          # Create a simple launcher script 
          cat > jpackage_input/forge-launcher.sh << 'EOL' | sed 's/^          //'
          #!/bin/bash
          # Set app directory
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          JAVA_PATH="$DIR/../runtime/Contents/Home/bin/java"
          
          # Set up cache directories in the user's home
          FORGE_USER_DIR="$HOME/.forge"
          mkdir -p "$FORGE_USER_DIR/cache/skins"
          mkdir -p "$FORGE_USER_DIR/cache/sounds"
          mkdir -p "$FORGE_USER_DIR/cache/fonts"
          mkdir -p "$FORGE_USER_DIR/cache/images"
          
          # Copy resources from app resources if they don't exist in user directory
          RESOURCES_COPIED=false
          
          # Copy skins
          if [ -d "$DIR/resources/skins" ]; then
            if [ ! "$(ls -A $FORGE_USER_DIR/cache/skins)" ]; then
              echo "Copying skin resources to $FORGE_USER_DIR/cache/skins"
              cp -R "$DIR/resources/skins/"* "$FORGE_USER_DIR/cache/skins/"
              RESOURCES_COPIED=true
            fi
          fi
          
          # Copy sounds
          if [ -d "$DIR/resources/sounds" ]; then
            if [ ! "$(ls -A $FORGE_USER_DIR/cache/sounds)" ]; then
              echo "Copying sound resources to $FORGE_USER_DIR/cache/sounds"
              cp -R "$DIR/resources/sounds/"* "$FORGE_USER_DIR/cache/sounds/"
              RESOURCES_COPIED=true
            fi
          fi
          
          # Copy fonts
          if [ -d "$DIR/resources/fonts" ]; then
            if [ ! "$(ls -A $FORGE_USER_DIR/cache/fonts)" ]; then
              echo "Copying font resources to $FORGE_USER_DIR/cache/fonts"
              cp -R "$DIR/resources/fonts/"* "$FORGE_USER_DIR/cache/fonts/"
              RESOURCES_COPIED=true
            fi
          fi
          
          # Copy images
          if [ -d "$DIR/resources/images" ]; then
            if [ ! "$(ls -A $FORGE_USER_DIR/cache/images)" ]; then
              echo "Copying image resources to $FORGE_USER_DIR/cache/images"
              cp -R "$DIR/resources/images/"* "$FORGE_USER_DIR/cache/images/"
              RESOURCES_COPIED=true
            fi
          fi
          
          if [ "$RESOURCES_COPIED" = true ]; then
            echo "Resources copied to $FORGE_USER_DIR"
          fi
          
          # Check if Java exists at expected path
          if [ ! -f "$JAVA_PATH" ]; then
            # Fallback to finding Java in various locations
            echo "Java not found at expected path: $JAVA_PATH"
            
            # Try to find Java in the runtime
            JAVA_PATH=$(find "$DIR/../" -name "java" -type f | grep -v "Runtime" | head -1)
            
            # If not found, try using system Java
            if [ -z "$JAVA_PATH" ]; then
              echo "Falling back to system Java"
              JAVA_PATH="java"
            else
              echo "Found Java at: $JAVA_PATH"
            fi
          fi
          
          echo "Launching Forge with Java: $JAVA_PATH"
          
          # Launch app with appropriate VM args
          "$JAVA_PATH" -Xmx4g -Dio.netty.tryReflectionSetAccessible=true -Dfile.encoding=UTF-8 -Duser.home="$HOME" -Dforge.profile.dir="$FORGE_USER_DIR" --add-opens java.desktop/java.beans=ALL-UNNAMED --add-opens java.desktop/javax.swing.border=ALL-UNNAMED --add-opens java.desktop/javax.swing.event=ALL-UNNAMED --add-opens java.desktop/sun.swing=ALL-UNNAMED --add-opens java.desktop/java.awt.image=ALL-UNNAMED --add-opens java.desktop/java.awt.color=ALL-UNNAMED --add-opens java.desktop/sun.awt.image=ALL-UNNAMED --add-opens java.desktop/javax.swing=ALL-UNNAMED --add-opens java.desktop/java.awt=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.nio.ch=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.math=ALL-UNNAMED --add-opens java.base/java.util.concurrent=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED -jar "$DIR/forge.jar"
          EOL
          chmod +x jpackage_input/forge-launcher.sh

          # Create the app package
          jpackage --input jpackage_input \
            --name "Forge" \
            --main-jar forge.jar \
            --main-class forge.view.Main \
            --type app-image \
            --icon jpackage_input/Forge.icns \
            --java-options "-Xmx4g" \
            --java-options "-Dio.netty.tryReflectionSetAccessible=true" \
            --java-options "-Dfile.encoding=UTF-8" \
            --java-options "--add-opens java.desktop/java.beans=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/javax.swing.border=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/javax.swing.event=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/sun.swing=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/java.awt.image=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/java.awt.color=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/sun.awt.image=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/javax.swing=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/java.awt=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.util=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.lang=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.lang.reflect=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.text=ALL-UNNAMED" \
            --java-options "--add-opens java.desktop/java.awt.font=ALL-UNNAMED" \
            --java-options "--add-opens java.base/jdk.internal.misc=ALL-UNNAMED" \
            --java-options "--add-opens java.base/sun.nio.ch=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.nio=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.math=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.util.concurrent=ALL-UNNAMED" \
            --java-options "--add-opens java.base/java.net=ALL-UNNAMED" \
            --app-version "$APP_VERSION" \
            --dest target \
            --vendor "MTG Forge" \
            --copyright "MTG Forge" \
            --file-associations forge-gui/src/main/config/forge.deck.associations \
            --resource-dir jpackage_input/resources \
            --runtime-image $JAVA_HOME
            
          # Create a DMG
          jpackage --name "Forge" \
            --app-image target/Forge.app \
            --type dmg \
            --dest target \
            --copyright "MTG Forge" \
            --vendor "MTG Forge"
            
          # Move the output files to the expected location
          mkdir -p forge-gui-desktop/target/forge-self-contained
          cp -R target/Forge.app forge-gui-desktop/target/forge-self-contained/
          cp target/Forge-*.dmg forge-gui-desktop/target/forge-self-contained/

      - name: List output files
        run: |
          echo "Listing contents of forge-gui-desktop/target directory:"
          ls -la forge-gui-desktop/target/
          echo "Checking original macOS app bundle:"
          ls -la forge-gui-desktop/target/*-osx/Forge.app || echo "Original Forge.app not found"
          echo "Checking self-contained macOS app bundle:"
          ls -la forge-gui-desktop/target/forge-self-contained || echo "Self-contained Forge.app not found"
          echo "Listing DMG file details:"
          ls -la forge-gui-desktop/target/*.dmg forge-gui-desktop/target/forge-self-contained/*.dmg || echo "No DMG files found"
          echo "Checking for Java runtime in the bundle:"
          find target/Forge.app -name "java" -type f || echo "Java binary not found in bundle"
          ls -la target/Forge.app/Contents/runtime/Contents/Home/bin/ || echo "Runtime bin directory not found"
          
      # The following steps are for signing and notarization
      # Uncomment these when you have set up the necessary secrets in your GitHub repository
      
      # - name: Import Apple Developer Certificate
      #   env:
      #     CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
      #     CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # Create a temporary keychain
      #     KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security default-keychain -s $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     
      #     # Import certificate to keychain
      #     echo $CERTIFICATE_BASE64 | base64 --decode > $RUNNER_TEMP/certificate.p12
      #     security import $RUNNER_TEMP/certificate.p12 -k $KEYCHAIN_PATH -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      # - name: Sign macOS App
      #   env:
      #     TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #   run: |
      #     # Find path to the built app
      #     APP_PATH=$(find forge-gui-desktop/target/ -name "*.app" -type d)
      #     
      #     # Sign the app
      #     codesign --force --deep --timestamp \
      #       --options runtime \
      #       --sign "Developer ID Application: $TEAM_ID" \
      #       "$APP_PATH"
      #     
      #     # Verify signing
      #     codesign --verify --verbose "$APP_PATH"

      # - name: Create ZIP for Notarization
      #   run: |
      #     APP_PATH=$(find forge-gui-desktop/target/ -name "*.app" -type d)
      #     APP_DIR=$(dirname "$APP_PATH")
      #     APP_NAME=$(basename "$APP_PATH" .app)
      #     
      #     cd "$APP_DIR"
      #     zip -r "${APP_NAME}.zip" "${APP_NAME}.app"
      #     echo "ZIP_PATH=${APP_DIR}/${APP_NAME}.zip" >> $GITHUB_ENV

      # - name: Notarize macOS App
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
      #     TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #   run: |
      #     # Submit for notarization
      #     xcrun notarytool submit "$ZIP_PATH" \
      #       --apple-id "$APPLE_ID" \
      #       --password "$APPLE_APP_PASSWORD" \
      #       --team-id "$TEAM_ID" \
      #       --wait
      #     
      #     # Staple the ticket to the app
      #     APP_PATH=$(find forge-gui-desktop/target/ -name "*.app" -type d)
      #     xcrun stapler staple "$APP_PATH"
      #     
      #     # Verify stapling
      #     stapler validate "$APP_PATH"

      # - name: Sign DMG
      #   env:
      #     TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #   run: |
      #     # Find the DMG and sign it
      #     DMG_PATH=$(find forge-gui-desktop/target/ -name "*.dmg")
      #     codesign --force --sign "Developer ID Application: $TEAM_ID" "$DMG_PATH"

      - name: Upload Mac App as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MacApp
          path: |
            forge-gui-desktop/target/*-osx/Forge.app/
            forge-gui-desktop/target/*.dmg
            forge-gui-desktop/target/forge-self-contained/
          if-no-files-found: warn

      - name: Upload Self-Contained Mac App as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MacApp-Self-Contained
          path: |
            forge-gui-desktop/target/forge-self-contained/
          if-no-files-found: warn

      - name: Upload to Release (if triggered by release)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            forge-gui-desktop/target/*.dmg
            forge-gui-desktop/target/forge-self-contained/*.dmg 